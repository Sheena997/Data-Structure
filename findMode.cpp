/*
501. 二叉搜索树中的众数
给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。
假定 BST 有如下定义：
结点左子树中所含结点的值小于等于当前结点的值
结点右子树中所含结点的值大于等于当前结点的值
左子树和右子树都是二叉搜索树
例如：
给定 BST [1,null,2,2],

   1
    \
     2
    /
   2
返回[2].
提示：如果众数超过1个，不需考虑输出顺序
进阶：你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）

来源：LeetCode
链接：https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    map<int, int> mp;
    
    void inorder(TreeNode* root)
    {
        if(root == NULL)
            return;
        
        inorder(root->left);
        ++mp[root->val];
        inorder(root->right);
    }
    vector<int> findMode(TreeNode* root) {
        vector<int> res;
        
        inorder(root);
        int most = INT_MIN;
        auto it = mp.begin();
        for(; it != mp.end(); ++it)
        {
            if(it->second > most)
                most = it->second;
        }
        for(it = mp.begin(); it != mp.end(); ++it)
        {
            if(it->second == most)
                res.push_back(it->first);
        }
            
        return res;
    } 
};